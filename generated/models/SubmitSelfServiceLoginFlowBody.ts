/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * OpenAPI spec version: v0.1.0-alpha.12
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SubmitSelfServiceLoginFlowWithLookupSecretMethodBody } from './SubmitSelfServiceLoginFlowWithLookupSecretMethodBody.ts';
import { SubmitSelfServiceLoginFlowWithOidcMethodBody } from './SubmitSelfServiceLoginFlowWithOidcMethodBody.ts';
import { SubmitSelfServiceLoginFlowWithPasswordMethodBody } from './SubmitSelfServiceLoginFlowWithPasswordMethodBody.ts';
import { SubmitSelfServiceLoginFlowWithTotpMethodBody } from './SubmitSelfServiceLoginFlowWithTotpMethodBody.ts';
import { SubmitSelfServiceLoginFlowWithWebAuthnMethodBody } from './SubmitSelfServiceLoginFlowWithWebAuthnMethodBody.ts';
import { HttpFile } from '../http/http.ts';

export class SubmitSelfServiceLoginFlowBody {
    /**
    * Sending the anti-csrf token is only required for browser login flows.
    */
    'csrf_token'?: string;
    /**
    * Identifier is the email or username of the user trying to log in. This field is only required when using WebAuthn for passwordless login. When using WebAuthn for multi-factor authentication, it is not needed.
    */
    'identifier': string;
    /**
    * Method should be set to \"lookup_secret\" when logging in using the lookup_secret strategy.
    */
    'method': string;
    /**
    * The user's password.
    */
    'password': string;
    /**
    * Identifier is the email or username of the user trying to log in. This field is deprecated!
    */
    'password_identifier'?: string;
    /**
    * The provider to register with
    */
    'provider': string;
    /**
    * The identity traits. This is a placeholder for the registration flow.
    */
    'traits'?: any;
    /**
    * The TOTP code.
    */
    'totp_code': string;
    /**
    * Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
    */
    'webauthn_login'?: string;
    /**
    * The lookup secret.
    */
    'lookup_secret': string;

    static readonly discriminator: string | undefined = "method";

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "csrf_token",
            "baseName": "csrf_token",
            "type": "string",
            "format": ""
        },
        {
            "name": "identifier",
            "baseName": "identifier",
            "type": "string",
            "format": ""
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string",
            "format": ""
        },
        {
            "name": "password_identifier",
            "baseName": "password_identifier",
            "type": "string",
            "format": ""
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string",
            "format": ""
        },
        {
            "name": "traits",
            "baseName": "traits",
            "type": "any",
            "format": ""
        },
        {
            "name": "totp_code",
            "baseName": "totp_code",
            "type": "string",
            "format": ""
        },
        {
            "name": "webauthn_login",
            "baseName": "webauthn_login",
            "type": "string",
            "format": ""
        },
        {
            "name": "lookup_secret",
            "baseName": "lookup_secret",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SubmitSelfServiceLoginFlowBody.attributeTypeMap;
    }

    public constructor() {
        this.method = "SubmitSelfServiceLoginFlowBody";
    }
}

