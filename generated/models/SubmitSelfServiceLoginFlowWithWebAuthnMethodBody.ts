/**
 * Ory APIs
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * OpenAPI spec version: v0.1.0-alpha.12
 * Contact: support@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http.ts';

export class SubmitSelfServiceLoginFlowWithWebAuthnMethodBody {
    /**
    * Sending the anti-csrf token is only required for browser login flows.
    */
    'csrf_token'?: string;
    /**
    * Identifier is the email or username of the user trying to log in. This field is only required when using WebAuthn for passwordless login. When using WebAuthn for multi-factor authentication, it is not needed.
    */
    'identifier'?: string;
    /**
    * Method should be set to \"webAuthn\" when logging in using the WebAuthn strategy.
    */
    'method': string;
    /**
    * Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
    */
    'webauthn_login'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "csrf_token",
            "baseName": "csrf_token",
            "type": "string",
            "format": ""
        },
        {
            "name": "identifier",
            "baseName": "identifier",
            "type": "string",
            "format": ""
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string",
            "format": ""
        },
        {
            "name": "webauthn_login",
            "baseName": "webauthn_login",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SubmitSelfServiceLoginFlowWithWebAuthnMethodBody.attributeTypeMap;
    }

    public constructor() {
    }
}

